// Code generated by "enumer -type=status -transform=upper"; DO NOT EDIT.

package tcp

import (
	"fmt"
	"strings"
)

const _statusName = "ACCEPTEDREJECTED"

var _statusIndex = [...]uint8{0, 8, 16}

const _statusLowerName = "acceptedrejected"

func (i status) String() string {
	if i < 0 || i >= status(len(_statusIndex)-1) {
		return fmt.Sprintf("status(%d)", i)
	}
	return _statusName[_statusIndex[i]:_statusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _statusNoOp() {
	var x [1]struct{}
	_ = x[Accepted-(0)]
	_ = x[Rejected-(1)]
}

var _statusValues = []status{Accepted, Rejected}

var _statusNameToValueMap = map[string]status{
	_statusName[0:8]:       Accepted,
	_statusLowerName[0:8]:  Accepted,
	_statusName[8:16]:      Rejected,
	_statusLowerName[8:16]: Rejected,
}

var _statusNames = []string{
	_statusName[0:8],
	_statusName[8:16],
}

// statusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func statusString(s string) (status, error) {
	if val, ok := _statusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _statusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to status values", s)
}

// statusValues returns all values of the enum
func statusValues() []status {
	return _statusValues
}

// statusStrings returns a slice of all String values of the enum
func statusStrings() []string {
	strs := make([]string, len(_statusNames))
	copy(strs, _statusNames)
	return strs
}

// IsAstatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i status) IsAstatus() bool {
	for _, v := range _statusValues {
		if i == v {
			return true
		}
	}
	return false
}
